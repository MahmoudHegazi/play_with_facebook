const fbGroups = {
    memebrsText: [],
    membersElms: [],
    members: [],
    timeout1: null,
    simpleAiText: function(searchTxts = [], text = '', charsAndNumbers = true) {
        try {
            let plainSearch = [];
            let match = [];
            searchTxts.forEach((searchWord) => {
                plainSearch.push(String(searchWord).toLocaleLowerCase().trim());
            });
            const plainTxt = String(text).toLowerCase().trim();
            const tokinzeList = plainTxt.split(" ");
            for (let i = 0; i < tokinzeList.length; i++) {
                let currentWord = tokinzeList[i];
                if (charsAndNumbers) {
                    // \w replace none chars and numbers when match word with simple AI
                    currentWord = currentWord.replace(/[^a-z0-9]/gi, '');
                }
                if (!match.includes(currentWord) && plainSearch.includes(currentWord)) {
                    match.push(currentWord);
                }
            }
            if (match.length == searchTxts.length) {
                return true;
            } else {
                return false;
            }
        } catch (error) {
            console.warn(error, 'unknown error');
            return false;
        }
    },
    getElementByText: (targetText = '', parentSelector = '') => {
        let target = null;
        const spans = document.querySelectorAll(`${parentSelector} span`);
        for (let i = 0; i < spans.length; i++) {
            const currentText = String(spans[i].innerText).replace(" ", "").trim().toLowerCase();

            if (currentText == targetText) {
                target = spans[i];
                break;
            }
        }
        return target;
    },
    isUniqueMember: function(member) {
        let found = false;
        for (let i = 0; i < fbGroups.members.length; i++) {
            let index = 0;
            let props = 0;
            const existMember = fbGroups.members[i];
            for (let prop in member) {
                props += 1;
                if (existMember.hasOwnProperty(prop)) {
                    if (member[prop] === existMember[prop]) {
                        index += 1;
                    }
                }
            }
            if (index == props) {
                return false;
                break
            }

        }
        return true;
    },
    getMemebers: (waitFor = 3000) => {
        if (isNaN(parseInt(waitFor))) {
            return false;
        }
        return new Promise((res, rej) => {
            setTimeout(() => {
                try {
                    const currentTargets = document.querySelectorAll("[role='main'] [role='list'] [role='listitem']");
                    let haveUnique = false;
                    let count = 0;
                    for (let i = 0; i < currentTargets.length; i++) {
                        const currentMemeber = currentTargets[i];
                        const currentMemeberTxt = currentMemeber.innerText.trim();
                        if (!fbGroups.memebrsText.includes(currentMemeberTxt)) {
                            fbGroups.membersElms.push(currentMemeber);
                            fbGroups.memebrsText.push(currentMemeberTxt);
                            count += 1;
                        }
                    }
                    if (count) {
                        res(fbGroups.membersElms);
                    } else {
                        rej();
                    }
                } catch {
                    rej();
                }
            }, waitFor);
        })
    },
    getGroupMembers: function(membersCount = 10, waitForScroll = 3000) {
        const secuirtyLooping = membersCount * 10;
        const peopleBtn = fbGroups.getElementByText('people', "[role='main']");
        if (peopleBtn) {
            peopleBtn.click();
            if (this.timeout1) {
                clearTimeout(fbGroups.timeout1);
            }
            fbGroups.timeout1 = setTimeout(() => {
                try {
                    const seeAllBtn = fbGroups.getElementByText('seeall', "[role='main']");
                    if (seeAllBtn) {
                        seeAllBtn.click();
                    }
                    setTimeout(async () => {
                        // fb as tested with Powershell he block first or second click loop will confiuse him
                        let error = '';
                        try {
                            for (let i = 0; i < secuirtyLooping; i++) {
                                if (fbGroups.membersElms.lenth >= membersCount) {
                                    break;
                                }
                                const getMembers = await fbGroups.getMemebers(waitForScroll);
                            }
                        } catch (error) {
                            error = error;
                        }
                        if (fbGroups.membersElms.length >= membersCount) {
                            fbGroups.membersElms = fbGroups.membersElms.slice(0, membersCount);
                            fbGroups.successGetMembersDataCB();
                            fbGroups.saveFile();
                        } else {
                            const errorMsg = (error) ? error : `unable to get target members now try again later max gotten is ${fbGroups.membersElms.length}`;
                            fbGroups.errorGetMembersDataCB(errorMsg);
                        }
                    }, 3000);
                } catch (error) {
                    fbGroups.systemErrorCb();
                }
            }, 5000);
        }
    },
    successGetMembersDataCB: function() {
        try {
            console.log("here is your target members", fbGroups.membersElms);
            for (let i = 0; i < fbGroups.membersElms.length; i++) {
                const member = {
                    name: '',
                    liveIn: '',
                    studiedAt: '',
                    mutual: '',
                    worksAt: '',
                    from: '',
                    followers: '',
                    bornOn: '',
                    additionalInfo: '',
                    url: ''
                };
                try {
                    const currentElm = fbGroups.membersElms[i];
                    const currentTxt = currentElm.innerText;
                    const links = currentElm.querySelectorAll("a");
                    const additionalInfo = [];
                    const mainInfo = [];
                    const memberDataKeys = [{
                            liveIn: ['lives', 'in'],
                            splitor: 'Lives in'
                        }, {
                            mutual: ['mutual', 'friend'],
                            splitor: 'mutual friend:'
                        }, {
                            worksAt: ['works', 'at'],
                            splitor: 'Works at'
                        }, {
                            studiedAt: ['studied', 'at'],
                            splitor: 'Studied at'
                        },
                        {
                            bornOn: ['born', 'on'],
                            splitor: 'Born on'

                        },
                        {
                            followers: ['followed', 'by'],
                            splitor: 'Followed by'
                        }
                    ];
                    if (links.length >= 2) {
                        // get member href
                        member['url'] = links[1].href;
                    }
                    const splitedMemberTxt = currentTxt.split("\n");
                    for (let m = 0; m < splitedMemberTxt.length; m++) {
                        const memberMetaInfo = splitedMemberTxt[m];
                        if (memberMetaInfo) {
                            if (m == 0) {
                                // name
                                member['name'] = memberMetaInfo;
                            } else {
                                let foundVal = false;
                                // other info
                                for (let k = 0; k < memberDataKeys.length; k++) {
                                    const keyObj = memberDataKeys[k];
                                    const objKeys = Object.keys(keyObj);
                                    if (objKeys.length >= 2) {
                                        const prop = objKeys[0];
                                        const splitor = memberDataKeys[k][objKeys[1]];
                                        const searchTxts = memberDataKeys[k][prop];
                                        const validTargetMeta = fbGroups.simpleAiText(searchTxts, memberMetaInfo, true);
                                        if (validTargetMeta && !mainInfo.includes(memberMetaInfo)) {
                                            const splitedInfo = memberMetaInfo.split(splitor).join("");
                                            member[prop] = splitedInfo;
                                            mainInfo.push(memberMetaInfo);
                                            console.log(memberMetaInfo, validTargetMeta, searchTxts);
                                            foundVal = true;
                                            break;
                                        }
                                    } else {
                                        continue;
                                    }
                                }
                                if (!foundVal) {
                                    // get from
                                    const validTargetMeta = fbGroups.simpleAiText(['From'], memberMetaInfo, true);
                                    if (validTargetMeta) {
                                        foundVal = true;
                                        member['from'] = memberMetaInfo.split('From').join("");
                                    }
                                    if (!foundVal) {
                                        // get aditional info
                                        if (!additionalInfo.includes(memberMetaInfo) && memberMetaInfo != 'Add friend') {
                                            additionalInfo.push(memberMetaInfo);
                                        }

                                    }
                                    // other info ends
                                }

                            }

                        } else {
                            continue;
                        }

                    }
                    if (additionalInfo.length > 0) {
                        member['additionalInfo'] = additionalInfo.join(",");
                    }
                    const isUniqueMember = fbGroups.isUniqueMember(member);
                    if (isUniqueMember) {
                        fbGroups.members.push(member);
                    } else {
                        continue
                    }
                    // member end
                } catch (error) {
                    console.log("error while geting member data");
                    continue;
                }
            }
        } catch (error) {
            console.log("bot error", error);
            fbGroups.systemErrorCb();
        }
    },
    saveFile: function() {

        // Create element with <a> tag
        const link = document.createElement("a");

        // Create a blog object with the file content which you want to add to the file (endings: 'native')=> used for dynamic translate line ending ex \n to fit the user system such as Windows, Mac, linux \r\n , \n no need access user OS
        let groupName = `unknown_${new Date().getTime()}`;
        let groupUrl = '';
        const groupNameElm = document.querySelector("[role='main'] a[role='link']:not([aria-label='Cover photo'])");
        if (groupNameElm) {
            groupName = groupNameElm.innerText.trim();
            groupUrl = groupNameElm.href;
        }
        const groupObj = {
            name: groupName,
            url: groupUrl,
            members: fbGroups.members
        };

        const jsonData = JSON.stringify(groupObj);
        const file = new Blob([jsonData], {
            type: 'text/json',
            endings: 'native'
        });

        // Add file content in the object URL
        link.href = URL.createObjectURL(file);

        // Add file name
        link.download = "sample.json";

        // Add click event to <a> tag to save file.
        link.click();

        /* browser keep refrence of that file in the URL, like temp save it for use it for example click on the link to download, this method used after you complete work with link(in this case click on it) to tell the browser remove the temp saved file for that url, so after this method called URL will refrence to file that not exist. this method tells browser remove that file not needed, so this not like data: image url as data contains all image but that blob url browser create file for it so that url not work alone like data:image */
        URL.revokeObjectURL(link.href);

    },
    errorGetMembersDataCB: (error = '') => {
        console.log(error);
        return false;
    },
    systemErrorCb: () => {
        console.log("bot has code error, or fb changed something, please contact us");
    }
}
